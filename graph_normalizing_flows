{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":67357,"databundleVersionId":8951125,"sourceType":"competition"},{"sourceId":8615222,"sourceType":"datasetVersion","datasetId":5156304},{"sourceId":9864760,"sourceType":"datasetVersion","datasetId":6054911}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"deps_path = '/kaggle/input/graph-libs'\n!pip install --no-index --find-links {deps_path} --requirement {deps_path}/requirements.txt\n\n\nimport os, gc\nimport sys, pdb\nimport copy, time\nimport json, random\nfrom IPython.display import HTML\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nfrom pathlib import Path\nimport networkx as nx\n\nimport torch\nimport torch.nn as nn\nimport torch_geometric.transforms as T\nfrom torch_geometric.nn import VGAE, GCNConv\nfrom torch_geometric.data import Data, Dataset\nfrom torch_geometric.loader import DataLoader\nfrom torch_geometric.utils import train_test_split_edges\n\nfrom typing import Dict, Any, Set\n\nimport matplotlib\nfrom matplotlib import colors\nimport matplotlib.pyplot as plt\nfrom colorama import Style, Fore\n%matplotlib inline","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:13:37.310453Z","iopub.execute_input":"2024-11-12T02:13:37.310978Z","iopub.status.idle":"2024-11-12T02:14:04.582419Z","shell.execute_reply.started":"2024-11-12T02:13:37.310934Z","shell.execute_reply":"2024-11-12T02:14:04.580819Z"}},"outputs":[{"name":"stdout","text":"Looking in links: /kaggle/input/graph-libs\nProcessing /kaggle/input/graph-libs/torch_geometric-2.6.1-py3-none-any.whl (from -r /kaggle/input/graph-libs/requirements.txt (line 1))\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (3.9.5)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (2024.6.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (3.1.4)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (1.26.4)\nRequirement already satisfied: psutil>=5.8.0 in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (5.9.3)\nRequirement already satisfied: pyparsing in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (3.1.2)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (2.32.3)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (4.66.4)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (1.3.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (23.2.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (1.4.1)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (6.0.5)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (1.9.4)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (4.0.3)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (2.1.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->torch_geometric->-r /kaggle/input/graph-libs/requirements.txt (line 1)) (2024.8.30)\nInstalling collected packages: torch_geometric\nSuccessfully installed torch_geometric-2.6.1\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!ls ../input/*","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:04.584785Z","iopub.execute_input":"2024-11-12T02:14:04.585494Z","iopub.status.idle":"2024-11-12T02:14:05.781646Z","shell.execute_reply.started":"2024-11-12T02:14:04.585449Z","shell.execute_reply":"2024-11-12T02:14:05.780093Z"}},"outputs":[{"name":"stdout","text":"../input/arc-prize-2024:\narc-agi_evaluation_challenges.json  arc-agi_training_challenges.json\narc-agi_evaluation_solutions.json   arc-agi_training_solutions.json\narc-agi_test_challenges.json\t    sample_submission.json\n\n../input/arc-solution-source-files-by-icecuber:\n Makefile  'archive 2'\t headers   safe_run.py\t src   version.txt\n\n../input/graph-libs:\nMarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\naiohappyeyeballs-2.4.3-py3-none-any.whl\naiohttp-3.10.10-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\naiosignal-1.3.1-py3-none-any.whl\nasync_timeout-4.0.3-py3-none-any.whl\nattrs-24.2.0-py3-none-any.whl\ncertifi-2024.8.30-py3-none-any.whl\ncharset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\nfrozenlist-1.5.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\nfsspec-2024.10.0-py3-none-any.whl\nidna-3.10-py3-none-any.whl\njinja2-3.1.4-py3-none-any.whl\nmultidict-6.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\nnumpy-2.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\npropcache-0.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\npsutil-6.1.0-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\npyparsing-3.2.0-py3-none-any.whl\nrequests-2.32.3-py3-none-any.whl\nrequirements.txt\ntorch_geometric-2.6.1-py3-none-any.whl\ntqdm-4.67.0-py3-none-any.whl\ntyping_extensions-4.12.2-py3-none-any.whl\nurllib3-2.2.3-py3-none-any.whl\nyarl-1.17.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"train1_path = '../input/arc-prize-2024/arc-agi_training_challenges.json'\ntrain2_path = '../input/arc-prize-2024/arc-agi_training_solutions.json'\n\neval1_path = '../input/arc-prize-2024/arc-agi_evaluation_challenges.json'\neval2_path = '../input/arc-prize-2024/arc-agi_evaluation_solutions.json'\n\ntest_path = '../input/arc-prize-2024/arc-agi_test_challenges.json'\nsample_path = '../input/arc-prize-2024/sample_submission.json'\n\n# # ......................................................................................................\n# cmap = colors.ListedColormap(\n#     ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n#      '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n\n# norm = colors.Normalize(vmin=0, vmax=9)\n# color_list = [\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"gray\", \"magenta\", \"orange\", \"sky\", \"brown\"]\n\n# # ......................................................................................................\n# plt.figure(figsize=(5, 2), dpi=200)\n# plt.imshow([list(range(10))], cmap=cmap, norm=norm)\n# plt.xticks(list(range(10)))\n# plt.yticks([])\n# plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:05.784509Z","iopub.execute_input":"2024-11-12T02:14:05.785058Z","iopub.status.idle":"2024-11-12T02:14:05.792118Z","shell.execute_reply.started":"2024-11-12T02:14:05.785012Z","shell.execute_reply":"2024-11-12T02:14:05.790757Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def parse_json_objects(json_path: str) -> Dict[str, Any]:\n    \"\"\"\n    Opens a JSON file and returns a dictionary containing all objects beyond the root.\n    \n    Args:\n        json_path (str): Path to the JSON file\n        \n    Returns:\n        Dict[str, Any]: Dictionary where each key-value pair represents an object from the JSON\n    \"\"\"\n    # Open and load the JSON file\n    with open(json_path, 'r') as file:\n        data_dict = json.load(file)\n        \n    return data_dict\n    \n# Example usage in notebook:\njson_path = train1_path\n\n# json_data is a dictionary with each puzzle type as an entry accessible by puzzle ID key\njson_data = parse_json_objects(json_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:05.794966Z","iopub.execute_input":"2024-11-12T02:14:05.795489Z","iopub.status.idle":"2024-11-12T02:14:06.174184Z","shell.execute_reply.started":"2024-11-12T02:14:05.795438Z","shell.execute_reply":"2024-11-12T02:14:06.172501Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"puzzle_keys = list(json_data.keys())\npuzzles=  []\nfor idx, puzzle_id in enumerate(puzzle_keys[:200]):\n    local_puzzle_train = json_data[puzzle_id]['train']\n    local_puzzle_test = json_data[puzzle_id]['test']   \n    # puzzles is list of lists of dictionaries, where each dictionary is an input:output puzzle mapping\n    puzzles.append(local_puzzle_train)\n\nexamples = []\nfor puzzle_type in range(len(puzzles)):\n    for example in range(len(puzzles[puzzle_type])):\n        example_input = puzzles[puzzle_type][example]['input']\n        example_output = puzzles[puzzle_type][example]['output']\n        # examples is list of lists of lists, where each final list of lists is a grid/puzzle\n        examples.append(example_input)\n        examples.append(example_output)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:06.175625Z","iopub.execute_input":"2024-11-12T02:14:06.176040Z","iopub.status.idle":"2024-11-12T02:14:06.186159Z","shell.execute_reply.started":"2024-11-12T02:14:06.175997Z","shell.execute_reply":"2024-11-12T02:14:06.185031Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# examples[1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:06.187990Z","iopub.execute_input":"2024-11-12T02:14:06.188406Z","iopub.status.idle":"2024-11-12T02:14:06.198247Z","shell.execute_reply.started":"2024-11-12T02:14:06.188353Z","shell.execute_reply":"2024-11-12T02:14:06.196654Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def create_grid_graph(grid):\n    grid = np.array(grid)\n    rows, cols = grid.shape\n    \n    # Create grid graph\n    G = nx.grid_2d_graph(rows, cols)\n    \n    # Add values as node attributes\n    for i in range(rows):\n        for j in range(cols):\n            G.nodes[(i, j)]['value'] = int(grid[i,j])\n    \n    return G","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:06.200155Z","iopub.execute_input":"2024-11-12T02:14:06.200723Z","iopub.status.idle":"2024-11-12T02:14:06.209606Z","shell.execute_reply.started":"2024-11-12T02:14:06.200664Z","shell.execute_reply":"2024-11-12T02:14:06.208368Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# pos = dict((n, (n[1], -n[0])) for n in G.nodes())  # Map (i,j) to (j,-i)  # Grid positions\n# labels = nx.get_node_attributes(G, 'value')  # Get dictionary of node:value pairs\n# nx.draw(G, pos=pos, with_labels=True, labels=labels, font_size=10, node_color=\"tab:green\",)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:06.210947Z","iopub.execute_input":"2024-11-12T02:14:06.211296Z","iopub.status.idle":"2024-11-12T02:14:06.222918Z","shell.execute_reply.started":"2024-11-12T02:14:06.211260Z","shell.execute_reply":"2024-11-12T02:14:06.221281Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"def networkx_to_pytorch_data(G):\n    \"\"\"Convert NetworkX graph to PyTorch Geometric Data object\"\"\"\n    # Get adjacency matrix\n    adj_matrix = nx.to_numpy_array(G)\n    \n    # Get edge indices\n    edge_index = torch.tensor(np.array(np.nonzero(adj_matrix)), dtype=torch.long)\n    \n    # Get node features (values)\n    node_values = [G.nodes[node]['value'] for node in G.nodes()]\n    # Convert to one-hot encoding or keep as is depending on your needs\n    x = torch.tensor(node_values, dtype=torch.float).view(-1, 1)\n    \n    # Create PyTorch Geometric Data object\n    data = Data(x=x, edge_index=edge_index)\n    \n    return data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:06.224359Z","iopub.execute_input":"2024-11-12T02:14:06.225412Z","iopub.status.idle":"2024-11-12T02:14:06.242363Z","shell.execute_reply.started":"2024-11-12T02:14:06.225364Z","shell.execute_reply":"2024-11-12T02:14:06.240901Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"def grid_to_pyg(grid):\n    # First check if grid is valid\n    if len(grid) <= 1 or len(grid[0]) <= 1:\n        print(f\"Warning: Grid too small - size {len(grid)}x{len(grid[0])}\")\n        return Data(x=torch.tensor([[0]]), edge_index=torch.empty((2, 0)))\n    \n    # Convert grid to tensor and flatten it to create node features\n    x = torch.tensor(grid).reshape(-1, 1).float()\n    \n    # Create edge indices for grid connectivity\n    n = len(grid)\n    edges = []\n    \n    for i in range(n):\n        for j in range(n):\n            current = i * n + j\n            \n            # Add edges to right neighbor\n            if j < n - 1:\n                edges.extend([[current, current + 1],\n                            [current + 1, current]])\n                \n            # Add edges to bottom neighbor    \n            if i < n - 1:\n                edges.extend([[current, current + n],\n                            [current + n, current]])\n    \n    if not edges:  # If no edges were created\n        print(f\"Warning: No edges created for grid size {n}x{n}\")\n        return Data(x=x, edge_index=torch.empty((2, 0)))\n        \n    edge_index = torch.tensor(edges).t()\n    \n    return Data(x=x, edge_index=edge_index)\n\n\n# Example usage with your grid\ngrid = [[0, 0, 0, 0, 7, 7, 0, 7, 7],\n        [0, 0, 0, 7, 7, 7, 7, 7, 7],\n        [0, 0, 0, 0, 7, 7, 0, 7, 7],\n        [0, 7, 7, 0, 7, 7, 0, 7, 7],\n        [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        [0, 7, 7, 0, 7, 7, 0, 7, 7],\n        [0, 0, 0, 0, 7, 7, 0, 7, 7],\n        [0, 0, 0, 7, 7, 7, 7, 7, 7],\n        [0, 0, 0, 0, 7, 7, 0, 7, 7]]\n\ndata = grid_to_pyg(grid)\n\n# # Verify the conversion\n# print(f\"Node features shape: {data.x.shape}\")  # Should be [81, 1]\n# print(f\"Edge index shape: {data.edge_index.shape}\")  # Should be [2, 144] for 9x9 grid\n# print(f\"First few node features: {data.x[:100].squeeze()}\")  # Should show the first 10 values from grid\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:06.246324Z","iopub.execute_input":"2024-11-12T02:14:06.246815Z","iopub.status.idle":"2024-11-12T02:14:06.308208Z","shell.execute_reply.started":"2024-11-12T02:14:06.246746Z","shell.execute_reply":"2024-11-12T02:14:06.306921Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Create list of graphs\ngraph_list = []\n\nfor i, grid in enumerate(examples):\n    data = grid_to_pyg(grid)\n    # Check if graph has more than one node and has edges\n    if data.x.size(0) > 1 and data.edge_index.numel() > 0:\n        graph_list.append(data)\n    else:\n        print(f\"Skipping graph {i}: nodes={data.x.size(0)}, edges={data.edge_index.numel()}\")\n\n# Create loader that will return batches of graphs\nloader = DataLoader(graph_list, batch_size=1, shuffle=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:06.309941Z","iopub.execute_input":"2024-11-12T02:14:06.310362Z","iopub.status.idle":"2024-11-12T02:14:07.645269Z","shell.execute_reply.started":"2024-11-12T02:14:06.310320Z","shell.execute_reply":"2024-11-12T02:14:07.643959Z"}},"outputs":[{"name":"stdout","text":"Warning: Grid too small - size 1x5\nSkipping graph 235: nodes=1, edges=0\nWarning: Grid too small - size 1x5\nSkipping graph 237: nodes=1, edges=0\nWarning: Grid too small - size 1x5\nSkipping graph 239: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 293: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 295: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 297: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 299: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 301: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 303: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 363: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 365: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 367: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 369: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 371: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 373: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 375: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 661: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 663: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 665: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 667: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 669: nodes=1, edges=0\nWarning: Grid too small - size 1x1\nSkipping graph 671: nodes=1, edges=0\nWarning: Grid too small - size 1x3\nSkipping graph 735: nodes=1, edges=0\nWarning: Grid too small - size 3x1\nSkipping graph 737: nodes=1, edges=0\nWarning: Grid too small - size 4x1\nSkipping graph 739: nodes=1, edges=0\nWarning: Grid too small - size 3x1\nSkipping graph 1133: nodes=1, edges=0\nWarning: Grid too small - size 1x3\nSkipping graph 1135: nodes=1, edges=0\nWarning: Grid too small - size 1x4\nSkipping graph 1137: nodes=1, edges=0\nWarning: Grid too small - size 3x1\nSkipping graph 1139: nodes=1, edges=0\nWarning: Grid too small - size 4x1\nSkipping graph 1141: nodes=1, edges=0\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"class VariationalGCNEncoder(nn.Module):\n    def __init__(self, in_channels, hidden_channels, latent_channels):\n        super().__init__()\n        self.conv1 = GCNConv(in_channels, hidden_channels)\n        self.conv_mu = GCNConv(hidden_channels, latent_channels)\n        self.conv_logstd = GCNConv(hidden_channels, latent_channels)\n\n    def forward(self, x, edge_index):\n        x = self.conv1(x, edge_index).relu()\n        return self.conv_mu(x, edge_index), self.conv_logstd(x, edge_index)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:07.646919Z","iopub.execute_input":"2024-11-12T02:14:07.647375Z","iopub.status.idle":"2024-11-12T02:14:07.656361Z","shell.execute_reply.started":"2024-11-12T02:14:07.647330Z","shell.execute_reply":"2024-11-12T02:14:07.654748Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"def visualize_pyg_data(data):\n    \"\"\"\n    Visualize a PyG Data object as a graph with node values\n    \n    Args:\n        data: PyG Data object with x and edge_index attributes\n    \"\"\"\n    # Convert to networkx graph\n    G = nx.Graph()\n    \n    # Add nodes with their features\n    for i in range(data.x.size(0)):\n        G.add_node(i, value=int(data.x[i].item()))  # Convert to int for cleaner display\n    \n    # Add edges\n    edges = data.edge_index.t().numpy()\n    edges = [(int(i), int(j)) for i, j in edges]\n    G.add_edges_from(edges)\n    \n    # Set up the plot\n    plt.figure(figsize=(8, 8))\n    \n    # Calculate grid layout\n    n = int(np.sqrt(data.x.size(0)))  # Assuming square grid\n    pos = {i: (i % n, n - 1 - i // n) for i in G.nodes()}\n    \n    # Draw edges\n    nx.draw_networkx_edges(G, pos, edge_color='gray', alpha=0.5)\n    \n    # Draw nodes\n    node_colors = [G.nodes[i]['value'] for i in G.nodes()]\n    nodes = nx.draw_networkx_nodes(G, pos, \n                                 node_color=node_colors,\n                                 node_size=1000,\n                                 cmap=plt.cm.viridis)\n    \n    # Add value labels\n    labels = {node: f\"{G.nodes[node]['value']}\" for node in G.nodes()}\n    nx.draw_networkx_labels(G, pos, labels, font_size=12, font_weight='bold')\n    \n    # Add colorbar\n    plt.colorbar(nodes)\n    \n    plt.title(\"Grid Graph with Node Values\")\n    plt.axis('equal')\n    plt.axis('off')\n    plt.show()\n\n# Example usage with additional debug info:\n# data = graph_list[665]\n# visualize_pyg_data(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:07.658491Z","iopub.execute_input":"2024-11-12T02:14:07.659061Z","iopub.status.idle":"2024-11-12T02:14:07.675497Z","shell.execute_reply.started":"2024-11-12T02:14:07.659002Z","shell.execute_reply":"2024-11-12T02:14:07.674286Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# Model parameters\nin_channels = 1  \nhidden_channels = 32\nlatent_channels = 16\nepochs = 100\n\n# Initialize model\nmodel = VGAE(VariationalGCNEncoder(in_channels, hidden_channels, latent_channels))\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = model.to(device)\n\ndef train_vae(model, loader, epochs=100):\n    optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n    model.train()\n    device = next(model.parameters()).device\n    \n    # Check if we have any valid graphs to train on\n    if len(loader.dataset) == 0:\n        raise ValueError(\"No valid graphs (with >1 node and edges) in the dataset\")\n    \n    for epoch in range(epochs):\n        total_loss = 0\n        for batch in loader:\n            batch = batch.to(device)\n                \n            optimizer.zero_grad()\n            \n            z = model.encode(batch.x, batch.edge_index)\n            loss = model.recon_loss(z, batch.edge_index)\n            loss = loss + (1 / batch.num_nodes) * model.kl_loss()\n            \n            loss.backward()\n            optimizer.step()\n            \n            total_loss += loss.item()\n            \n        if len(loader) > 0:  # Only compute average if we have valid graphs\n            avg_loss = total_loss / len(loader)\n            if (epoch + 1) % 10 == 0:\n                print(f'Epoch {epoch+1:03d}, Average Loss: {avg_loss:.4f}')\n    \n    return model\n\n# Print dataset statistics before training\nprint(f\"Total graphs: {len(examples)}\")\nprint(f\"Valid graphs for training: {len(graph_list)}\")\nprint(f\"Filtered out {len(examples) - len(graph_list)} invalid graphs\")\n\ntrained_model = train_vae(model, loader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T02:14:07.677116Z","iopub.execute_input":"2024-11-12T02:14:07.678231Z","iopub.status.idle":"2024-11-12T02:14:09.628217Z","shell.execute_reply.started":"2024-11-12T02:14:07.678183Z","shell.execute_reply":"2024-11-12T02:14:09.625788Z"}},"outputs":[{"name":"stdout","text":"Total graphs: 1300\nValid graphs for training: 1270\nFiltered out 30 invalid graphs\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[14], line 53\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mValid graphs for training: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(graph_list)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     51\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFiltered out \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(examples)\u001b[38;5;250m \u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;28mlen\u001b[39m(graph_list)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m invalid graphs\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 53\u001b[0m trained_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_vae\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mloader\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[14], line 32\u001b[0m, in \u001b[0;36mtrain_vae\u001b[0;34m(model, loader, epochs)\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n\u001b[1;32m     30\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[0;32m---> 32\u001b[0m z \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencode\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbatch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43medge_index\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     33\u001b[0m loss \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mrecon_loss(z, batch\u001b[38;5;241m.\u001b[39medge_index)\n\u001b[1;32m     34\u001b[0m loss \u001b[38;5;241m=\u001b[39m loss \u001b[38;5;241m+\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m/\u001b[39m batch\u001b[38;5;241m.\u001b[39mnum_nodes) \u001b[38;5;241m*\u001b[39m model\u001b[38;5;241m.\u001b[39mkl_loss()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/nn/models/autoencoder.py:169\u001b[0m, in \u001b[0;36mVGAE.encode\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    167\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mencode\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    168\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\"\"\"\u001b[39;00m  \u001b[38;5;66;03m# noqa: D419\u001b[39;00m\n\u001b[0;32m--> 169\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__mu__, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__logstd__ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencoder\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    170\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__logstd__ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__logstd__\u001b[38;5;241m.\u001b[39mclamp(\u001b[38;5;28mmax\u001b[39m\u001b[38;5;241m=\u001b[39mMAX_LOGSTD)\n\u001b[1;32m    171\u001b[0m     z \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreparametrize(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__mu__, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__logstd__)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","Cell \u001b[0;32mIn[12], line 9\u001b[0m, in \u001b[0;36mVariationalGCNEncoder.forward\u001b[0;34m(self, x, edge_index)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x, edge_index):\n\u001b[0;32m----> 9\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43medge_index\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mrelu()\n\u001b[1;32m     10\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconv_mu(x, edge_index), \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconv_logstd(x, edge_index)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/nn/conv/gcn_conv.py:241\u001b[0m, in \u001b[0;36mGCNConv.forward\u001b[0;34m(self, x, edge_index, edge_weight)\u001b[0m\n\u001b[1;32m    239\u001b[0m cache \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cached_edge_index\n\u001b[1;32m    240\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cache \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 241\u001b[0m     edge_index, edge_weight \u001b[38;5;241m=\u001b[39m \u001b[43mgcn_norm\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# yapf: disable\u001b[39;49;00m\n\u001b[1;32m    242\u001b[0m \u001b[43m        \u001b[49m\u001b[43medge_index\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43medge_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msize\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnode_dim\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    243\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimproved\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43madd_self_loops\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mflow\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    244\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcached:\n\u001b[1;32m    245\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cached_edge_index \u001b[38;5;241m=\u001b[39m (edge_index, edge_weight)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/nn/conv/gcn_conv.py:108\u001b[0m, in \u001b[0;36mgcn_norm\u001b[0;34m(edge_index, edge_weight, num_nodes, improved, add_self_loops, flow, dtype)\u001b[0m\n\u001b[1;32m    106\u001b[0m row, col \u001b[38;5;241m=\u001b[39m edge_index[\u001b[38;5;241m0\u001b[39m], edge_index[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m    107\u001b[0m idx \u001b[38;5;241m=\u001b[39m col \u001b[38;5;28;01mif\u001b[39;00m flow \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msource_to_target\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m row\n\u001b[0;32m--> 108\u001b[0m deg \u001b[38;5;241m=\u001b[39m \u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43medge_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43midx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdim_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_nodes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduce\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msum\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    109\u001b[0m deg_inv_sqrt \u001b[38;5;241m=\u001b[39m deg\u001b[38;5;241m.\u001b[39mpow_(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.5\u001b[39m)\n\u001b[1;32m    110\u001b[0m deg_inv_sqrt\u001b[38;5;241m.\u001b[39mmasked_fill_(deg_inv_sqrt \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124minf\u001b[39m\u001b[38;5;124m'\u001b[39m), \u001b[38;5;241m0\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/utils/_scatter.py:75\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(src, index, dim, dim_size, reduce)\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msum\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124madd\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     74\u001b[0m     index \u001b[38;5;241m=\u001b[39m broadcast(index, src, dim)\n\u001b[0;32m---> 75\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msrc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnew_zeros\u001b[49m\u001b[43m(\u001b[49m\u001b[43msize\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter_add_\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdim\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msrc\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     77\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     78\u001b[0m     count \u001b[38;5;241m=\u001b[39m src\u001b[38;5;241m.\u001b[39mnew_zeros(dim_size)\n","\u001b[0;31mRuntimeError\u001b[0m: index 18 is out of bounds for dimension 0 with size 18"],"ename":"RuntimeError","evalue":"index 18 is out of bounds for dimension 0 with size 18","output_type":"error"}],"execution_count":14},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}